<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">
    <spring:beans>
        <spring:import resource="classpath:rom.xml" />
        <spring:import resource="classpath:implementation.xml"/>
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration_MUnit_New" host="0.0.0.0" port="8081" basePath="rom/v1.2" doc:name="HTTP Request Configuration" protocol="HTTPS">
        <tls:context>
            <tls:trust-store path="truststore.ts" password="keystorepass" type="jks" insecure="true"/>
        </tls:context>
    </http:request-config>

    <munit:test name="put:/orders/orderNumber/cause:application/json:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [put:/orders/orderNumber/cause:application/json:rom11-config-200-application/json]" ignore="true">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['log final payload']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/put_200_orders_{ordernumber}_cause_application_json.json').asString()]">
                <mock:inbound-properties>
                    <mock:inbound-property key="http.status" value="200"/>
                </mock:inbound-properties>
            </mock:then-return>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPUpdateCause']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/put_200_orders_{ordernumber}_cause_application_json.json').asString()]"/>
        </mock:when>
        <set-payload value="#[getResource('scaffolder/request/put_orders_{ordernumber}_cause_application_json.json').asString()]" doc:name="Set Payload"/>
        <set-variable variableName="state" value="#['mo']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="PUT" path="/orders/1338189/cause" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/put_200_orders_{ordernumber}_cause_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="put:/orders/orderNumber/device:application/json:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [put:/orders/orderNumber/device:application/json:rom11-config-200-application/json]" ignore="true">
        <set-payload value="#[getResource('scaffolder/request/put_orders_{ordernumber}_device_application_json.json').asString()]" doc:name="Set Payload"/>
        <set-variable variableName="state" value="#['il']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="PUT" path="/orders/{orderNumber}/device" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/put_200_orders_{ordernumber}_device_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="put:/orders/orderNumber/esrt:application/json:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [put:/orders/orderNumber/esrt:application/json:rom11-config-200-application/json]" ignore="true">
        <set-payload value="#[getResource('scaffolder/request/put_orders_{ordernumber}_esrt_application_json.json').asString()]" doc:name="Set Payload"/>
        <set-variable variableName="state" value="#['il']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="PUT" path="/orders/{orderNumber}/esrt" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/put_200_orders_{ordernumber}_esrt_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="put:/orders/orderNumber/weather:application/json:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [put:/orders/orderNumber/weather:application/json:rom11-config-200-application/json]" ignore="true">
        <set-payload value="#[getResource('scaffolder/request/put_orders_{ordernumber}_weather_application_json.json').asString()]" doc:name="Set Payload"/>
        <set-variable variableName="state" value="#['il']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="PUT" path="/orders/{orderNumber}/weather" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/put_200_orders_{ordernumber}_weather_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/orders/codes/cause:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/orders/codes/cause:rom11-config-200-application/json]" ignore="true">
        <set-variable variableName="state" value="#['il']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/orders/codes/cause" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_orders_codes_cause_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/employees/employeeId/crews:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/employees/employeeId/crews:rom11-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/employees/{employeeId}/crews" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_employees_{employeeid}_crews_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/orders/codes/weather:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/orders/codes/weather:rom11-config-200-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTPWeatherCode']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/get_200_orders_codes_weather_application_json.json').asString()]">
                <mock:inbound-properties>
                    <mock:inbound-property key="http.status" value="200"/>
                </mock:inbound-properties>
            </mock:then-return>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['WeatherLogger']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/get_200_orders_codes_weather_application_json.json').asString()]">
                <mock:invocation-properties>
                    <mock:invocation-property value="#[]"/>
                </mock:invocation-properties>
            </mock:then-return>
        </mock:when>
        <set-variable variableName="state" value="#['il']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/orders/codes/weather" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_orders_codes_weather_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/crews/crewId:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/crews/crewId:rom11-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/crews/{crewId}" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_crews_{crewid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/employees/employeeId/crews/crewId:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/employees/employeeId/crews/crewId:rom11-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/employees/{employeeId}/crews/{crewId}" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_employees_{employeeid}_crews_{crewid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/orders/crews/crewId:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/orders/crews/crewId:rom11-config-200-application/json]" ignore="true">
        <set-variable variableName="state" value="#['il']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/orders/crews/{crewId}" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_orders_crews_{crewid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/crews/employee/employeeId:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/crews/employee/employeeId:rom11-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/crews/employee/{employeeId}" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_crews_employee_{employeeid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/employees/employeeId:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/employees/employeeId:rom11-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/employees/{employeeId}" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_employees_{employeeid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/orders/orderNumber:rom11-config-200-application/json-FlowTest" description="Verifying functionality of [get:/orders/orderNumber:rom11-config-200-application/json]" ignore="true">
        <set-variable variableName="state" value="#['mo']" doc:name="state" />
        <http:request config-ref="HTTP_Request_Configuration_MUnit_New" method="GET" path="/orders/{orderNumber}" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="state" value="#[flowVars['state']]"/>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_orders_{ordernumber}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
</mule>
